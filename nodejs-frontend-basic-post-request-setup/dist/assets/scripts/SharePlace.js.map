{"version":3,"file":"SharePlace.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://my-place/./src/UI/Map.js","webpack://my-place/./src/UI/Modal.js","webpack://my-place/./src/Utility/Location.js","webpack://my-place/webpack/bootstrap","webpack://my-place/webpack/runtime/define property getters","webpack://my-place/webpack/runtime/hasOwnProperty shorthand","webpack://my-place/webpack/runtime/make namespace object","webpack://my-place/./src/SharePlace.js"],"sourcesContent":["export class Map {\n  constructor(coords) {\n    this.render(coords);\n  }\n\n  render(coordinates) {\n    if (!google) {\n      alert('Could not load maps library - please try again later!');\n      return;\n    }\n\n    const map = new google.maps.Map(document.getElementById('map'), {\n      center: coordinates,\n      zoom: 16\n    });\n\n    new google.maps.Marker({\n      position: coordinates,\n      map: map\n    });\n  }\n}\n","export class Modal {\n    constructor(contentId, fallbackText) {\n        this.fallbackText = fallbackText;\n        this.contentTemplateEl = document.getElementById(contentId);\n        this.modalTemplateEl = document.getElementById('modal-template');\n    }\n    show() {\n        if ('content' in document.createElement('template')) {\n            // Deep clone the content of the #modal-template element\n            const modalElements = document.importNode(this.modalTemplateEl.content, true);\n            this.modalElement = modalElements.querySelector('.modal');\n            this.backdropElement = modalElements.querySelector('.backdrop');\n\n            const contentElement = document.importNode(this.contentTemplateEl.content, true);\n\n            this.modalElement.appendChild(contentElement);\n\n            document.body.insertAdjacentElement('afterbegin', this.modalElement);\n            document.body.insertAdjacentElement('afterbegin', this.backdropElement);\n        } else {\n            alert(this.fallbackText);\n        }\n    }\n\n    hide() {\n        if (this.modalElement) {\n            document.body.removeChild(this.modalElement); // this.modalElement.remove();\n            document.body.removeChild(this.backdropElement); // this.backdropElement.remove();\n            this.modalElement = null;\n            this.backdropElement = null;\n        }\n    }\n}","const GOOGLE_API_KEY = 'AIzaSyD99o_yXLkIIlSPBCF5VtN53_-iJELxY6Q';\n\n/**\n * Retrieves the address from the given coordinates using the Google Maps Geocoding API.\n * @param {Object} coords - The coordinates object containing latitude and longitude.\n * @returns {Promise<string>} The address corresponding to the given coordinates.\n * @throws {Error} If the API request fails or if there is an error in the response data.\n */\nexport async function getAddressFromCoordinates(coords) {\n  const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${coords.lat},${coords.lng}&key=${GOOGLE_API_KEY}`);\n\n  if (!response.ok) {\n    throw new Error('Failed to fetch address. Please try again!');\n  }\n  const data = await response.json();\n  if (data.error_message) {\n    throw new Error(data.error_message);\n  }\n  const address = data.results[0].formatted_address;\n  return address;\n}\n\n\n/**\n * Retrieves the coordinates of a given address using the Google Maps Geocoding API.\n * -----------\n * https://developers.google.com/maps/documentation/geocoding/overview\n * \n * @param {string} address - The address to retrieve coordinates for.\n * @returns {Promise<{ lat: number, lng: number }>} - The coordinates of the address.\n * @throws {Error} - If there is an error fetching the coordinates or if the address is invalid.\n */\nexport async function getCoordinatesFromAddress(address) {\n  const urlAddress = encodeURI(address);\n  const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${urlAddress}&key=${GOOGLE_API_KEY}`);\n\n  if (!response.ok) {\n    throw new Error('Failed to fetch coordinates. Please try again!');\n  }\n\n  const data = await response.json();\n  if (data.error_message) {\n    throw new Error(data.error_message);\n  }\n  const coordinates = data.results[0].geometry.location;\n  return coordinates;\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Modal } from './UI/Modal';\nimport { Map } from './UI/Map';\nimport { getCoordinatesFromAddress, getAddressFromCoordinates } from './Utility/Location';\n\nclass PlaceFinder {\n  constructor() {\n    const addressForm = document.querySelector('form');\n    const locateUserBtn = document.getElementById('locate-btn');\n    this.shareBtn = document.getElementById('share-btn');\n\n    // if we don't bind the method to the class, the 'this' keyword will refer to the button element\n    locateUserBtn.addEventListener('click', this.locateUserHandler.bind(this));\n    addressForm.addEventListener('submit', this.findAddressHandler.bind(this));\n    this.shareBtn.addEventListener('click', this.sharePlaceHandler);\n  }\n\n  sharePlaceHandler() {\n    const shareLinkInput = document.getElementById('share-link');\n    if (!navigator.clipboard) {\n      shareLinkInput.select();\n      return;\n    }\n    navigator.clipboard.writeText(shareLinkInput.value)\n      .then(() => {\n        alert('Copied into clipboard!');\n      })\n      .catch(err => {\n        console.log(err);\n        shareLinkInput.select();\n      });\n  }\n  /**\n   * Selects a place on the map and renders it if the map is already initialized,\n   * otherwise creates a new map instance and renders the place.\n   *\n   * @param {Object} coordinates - The coordinates of the selected place.\n   */\n  selectPlace(coordinates, address) {\n    if (this.map) {\n      this.map.render(coordinates);\n    } else {\n      this.map = new Map(coordinates);\n    }\n\n    // Send a POST request to the server to store the location\n    fetch('http://localhost:3000/add-location', {\n      method: 'POST',\n      body: JSON.stringify({\n        address: address,\n        lat: coordinates.lat,\n        lng: coordinates.lng\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      console.log(data);\n    });\n\n    this.shareBtn.disabled = false;\n    const shareLinkInput = document.getElementById('share-link');\n    shareLinkInput.value = `${location.origin}/my-place?address=${encodeURI(address)}&lat=${coordinates.lat}&lng=${coordinates.lng}`;\n  }\n\n\n  locateUserHandler() {\n    // Check if the browser supports the geolocation API\n    if (!navigator.geolocation) {\n      alert('Location feature is not available in your browser - please use a more modern browser or enter an address manually.');\n      return;\n    }\n\n    // Show a loading modal while the location is being fetched\n    const modal = new Modal('loading-modal-content', 'Loading location - please wait!');\n    modal.show();\n\n    // Fetch the user's location\n    navigator.geolocation.getCurrentPosition(\n      // Success callback\n      async successResult => {\n        const coordinates = {\n          lat: successResult.coords.latitude,\n          lng: successResult.coords.longitude\n        };\n        // Render the map with the user's location\n        const address = await getAddressFromCoordinates(coordinates);\n        modal.hide();\n        this.selectPlace(coordinates, address);\n      },\n      // Error callback\n      error => {\n        modal.hide();\n        alert('Could not locate you unfortunately. Please enter an address manually!');\n      }\n    );\n  }\n\n  async findAddressHandler(event) {\n    event.preventDefault();\n    const address = event.target.querySelector('input').value;\n    if (!address || address.trim().length === 0) {\n      alert('Invalid address entered - please try again!');\n      return;\n    }\n    const modal = new Modal('loading-modal-content', 'Loading location - please wait!');\n    modal.show();\n\n    // Fetch the coordinates for the entered address\n    try {\n      const coordinates = await getCoordinatesFromAddress(address);\n      this.selectPlace(coordinates, address);\n    } catch (err) {\n      alert(err.message);\n    }\n    modal.hide();\n  }\n}\nconst placeFinder = new PlaceFinder();"],"names":[],"sourceRoot":""}