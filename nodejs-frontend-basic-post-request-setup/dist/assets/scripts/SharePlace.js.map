{"version":3,"file":"SharePlace.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://my-place/./src/UI/Map.js","webpack://my-place/./src/UI/Modal.js","webpack://my-place/./src/Utility/Location.js","webpack://my-place/webpack/bootstrap","webpack://my-place/webpack/runtime/define property getters","webpack://my-place/webpack/runtime/hasOwnProperty shorthand","webpack://my-place/webpack/runtime/make namespace object","webpack://my-place/./src/SharePlace.js"],"sourcesContent":["export class Map {\r\n  constructor(coords) {\r\n    this.render(coords);\r\n  }\r\n\r\n  render(coordinates) {\r\n    if (!google) {\r\n      alert('Could not load maps library - please try again later!');\r\n      return;\r\n    }\r\n\r\n    const map = new google.maps.Map(document.getElementById('map'), {\r\n      center: coordinates,\r\n      zoom: 16\r\n    });\r\n\r\n    new google.maps.Marker({\r\n      position: coordinates,\r\n      map: map\r\n    });\r\n  }\r\n}\r\n","export class Modal {\r\n    constructor(contentId, fallbackText) {\r\n        this.fallbackText = fallbackText;\r\n        this.contentTemplateEl = document.getElementById(contentId);\r\n        this.modalTemplateEl = document.getElementById('modal-template');\r\n    }\r\n    show() {\r\n        if ('content' in document.createElement('template')) {\r\n            // Deep clone the content of the #modal-template element\r\n            const modalElements = document.importNode(this.modalTemplateEl.content, true);\r\n            this.modalElement = modalElements.querySelector('.modal');\r\n            this.backdropElement = modalElements.querySelector('.backdrop');\r\n\r\n            const contentElement = document.importNode(this.contentTemplateEl.content, true);\r\n\r\n            this.modalElement.appendChild(contentElement);\r\n\r\n            document.body.insertAdjacentElement('afterbegin', this.modalElement);\r\n            document.body.insertAdjacentElement('afterbegin', this.backdropElement);\r\n        } else {\r\n            alert(this.fallbackText);\r\n        }\r\n    }\r\n\r\n    hide() {\r\n        if (this.modalElement) {\r\n            document.body.removeChild(this.modalElement); // this.modalElement.remove();\r\n            document.body.removeChild(this.backdropElement); // this.backdropElement.remove();\r\n            this.modalElement = null;\r\n            this.backdropElement = null;\r\n        }\r\n    }\r\n}","const GOOGLE_API_KEY = 'AIzaSyD99o_yXLkIIlSPBCF5VtN53_-iJELxY6Q';\r\n\r\n/**\r\n * Retrieves the address from the given coordinates using the Google Maps Geocoding API.\r\n * @param {Object} coords - The coordinates object containing latitude and longitude.\r\n * @returns {Promise<string>} The address corresponding to the given coordinates.\r\n * @throws {Error} If the API request fails or if there is an error in the response data.\r\n */\r\nexport async function getAddressFromCoordinates(coords) {\r\n  const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${coords.lat},${coords.lng}&key=${GOOGLE_API_KEY}`);\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch address. Please try again!');\r\n  }\r\n  const data = await response.json();\r\n  if (data.error_message) {\r\n    throw new Error(data.error_message);\r\n  }\r\n  const address = data.results[0].formatted_address;\r\n  return address;\r\n}\r\n\r\n\r\n/**\r\n * Retrieves the coordinates of a given address using the Google Maps Geocoding API.\r\n * -----------\r\n * https://developers.google.com/maps/documentation/geocoding/overview\r\n * \r\n * @param {string} address - The address to retrieve coordinates for.\r\n * @returns {Promise<{ lat: number, lng: number }>} - The coordinates of the address.\r\n * @throws {Error} - If there is an error fetching the coordinates or if the address is invalid.\r\n */\r\nexport async function getCoordinatesFromAddress(address) {\r\n  const urlAddress = encodeURI(address);\r\n  const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${urlAddress}&key=${GOOGLE_API_KEY}`);\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch coordinates. Please try again!');\r\n  }\r\n\r\n  const data = await response.json();\r\n  if (data.error_message) {\r\n    throw new Error(data.error_message);\r\n  }\r\n  const coordinates = data.results[0].geometry.location;\r\n  return coordinates;\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Modal } from './UI/Modal';\r\nimport { Map } from './UI/Map';\r\nimport { getCoordinatesFromAddress, getAddressFromCoordinates } from './Utility/Location';\r\n\r\nclass PlaceFinder {\r\n  constructor() {\r\n    const addressForm = document.querySelector('form');\r\n    const locateUserBtn = document.getElementById('locate-btn');\r\n    this.shareBtn = document.getElementById('share-btn');\r\n\r\n    // if we don't bind the method to the class, the 'this' keyword will refer to the button element\r\n    locateUserBtn.addEventListener('click', this.locateUserHandler.bind(this));\r\n    addressForm.addEventListener('submit', this.findAddressHandler.bind(this));\r\n    this.shareBtn.addEventListener('click', this.sharePlaceHandler);\r\n  }\r\n\r\n  sharePlaceHandler() {\r\n    const shareLinkInput = document.getElementById('share-link');\r\n    if (!navigator.clipboard) {\r\n      shareLinkInput.select();\r\n      return;\r\n    }\r\n    navigator.clipboard.writeText(shareLinkInput.value)\r\n      .then(() => {\r\n        alert('Copied into clipboard!');\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        shareLinkInput.select();\r\n      });\r\n  }\r\n  /**\r\n   * Selects a place on the map and renders it if the map is already initialized,\r\n   * otherwise creates a new map instance and renders the place.\r\n   *\r\n   * @param {Object} coordinates - The coordinates of the selected place.\r\n   */\r\n  selectPlace(coordinates, address) {\r\n    if (this.map) {\r\n      this.map.render(coordinates);\r\n    } else {\r\n      this.map = new Map(coordinates);\r\n    }\r\n\r\n    // Send a POST request to the server to store the location\r\n    fetch('http://localhost:3001/add-location', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        address: address,\r\n        lat: coordinates.lat,\r\n        lng: coordinates.lng\r\n      }),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(data => {\r\n      const locationId = data.locId;\r\n      this.shareBtn.disabled = false;\r\n      const shareLinkInput = document.getElementById('share-link');\r\n      shareLinkInput.value = `${location.origin}/my-place/?location=${locationId}`;\r\n    });\r\n  }\r\n\r\n\r\n  locateUserHandler() {\r\n    // Check if the browser supports the geolocation API\r\n    if (!navigator.geolocation) {\r\n      alert('Location feature is not available in your browser - please use a more modern browser or enter an address manually.');\r\n      return;\r\n    }\r\n\r\n    // Show a loading modal while the location is being fetched\r\n    const modal = new Modal('loading-modal-content', 'Loading location - please wait!');\r\n    modal.show();\r\n\r\n    // Fetch the user's location\r\n    navigator.geolocation.getCurrentPosition(\r\n      // Success callback\r\n      async successResult => {\r\n        const coordinates = {\r\n          lat: successResult.coords.latitude,\r\n          lng: successResult.coords.longitude\r\n        };\r\n        // Render the map with the user's location\r\n        const address = await getAddressFromCoordinates(coordinates);\r\n        modal.hide();\r\n        this.selectPlace(coordinates, address);\r\n      },\r\n      // Error callback\r\n      error => {\r\n        modal.hide();\r\n        alert('Could not locate you unfortunately. Please enter an address manually!');\r\n      }\r\n    );\r\n  }\r\n\r\n  async findAddressHandler(event) {\r\n    event.preventDefault();\r\n    const address = event.target.querySelector('input').value;\r\n    if (!address || address.trim().length === 0) {\r\n      alert('Invalid address entered - please try again!');\r\n      return;\r\n    }\r\n    const modal = new Modal('loading-modal-content', 'Loading location - please wait!');\r\n    modal.show();\r\n\r\n    // Fetch the coordinates for the entered address\r\n    try {\r\n      const coordinates = await getCoordinatesFromAddress(address);\r\n      this.selectPlace(coordinates, address);\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n    modal.hide();\r\n  }\r\n}\r\nconst placeFinder = new PlaceFinder();"],"names":[],"sourceRoot":""}